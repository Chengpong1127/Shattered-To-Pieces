//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/InputManager/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""AssemblyRoom"",
            ""id"": ""12770697-a6a7-41a0-9ea7-56be72fce1b0"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""e7ebee42-b76f-4ed3-81ec-f7e1bcfba742"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""6f6605d8-2440-41c4-b44c-f8060244fed7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21fac6ed-286e-44e6-851a-075fccdbc4b3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8224ba65-b15e-41a9-a495-02f68850af52"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // AssemblyRoom
        m_AssemblyRoom = asset.FindActionMap("AssemblyRoom", throwIfNotFound: true);
        m_AssemblyRoom_Drag = m_AssemblyRoom.FindAction("Drag", throwIfNotFound: true);
        m_AssemblyRoom_Click = m_AssemblyRoom.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AssemblyRoom
    private readonly InputActionMap m_AssemblyRoom;
    private List<IAssemblyRoomActions> m_AssemblyRoomActionsCallbackInterfaces = new List<IAssemblyRoomActions>();
    private readonly InputAction m_AssemblyRoom_Drag;
    private readonly InputAction m_AssemblyRoom_Click;
    public struct AssemblyRoomActions
    {
        private @InputManager m_Wrapper;
        public AssemblyRoomActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drag => m_Wrapper.m_AssemblyRoom_Drag;
        public InputAction @Click => m_Wrapper.m_AssemblyRoom_Click;
        public InputActionMap Get() { return m_Wrapper.m_AssemblyRoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AssemblyRoomActions set) { return set.Get(); }
        public void AddCallbacks(IAssemblyRoomActions instance)
        {
            if (instance == null || m_Wrapper.m_AssemblyRoomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AssemblyRoomActionsCallbackInterfaces.Add(instance);
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IAssemblyRoomActions instance)
        {
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IAssemblyRoomActions instance)
        {
            if (m_Wrapper.m_AssemblyRoomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAssemblyRoomActions instance)
        {
            foreach (var item in m_Wrapper.m_AssemblyRoomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AssemblyRoomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AssemblyRoomActions @AssemblyRoom => new AssemblyRoomActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IAssemblyRoomActions
    {
        void OnDrag(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
